[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Docs",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.",
    "crumbs": [
      "Basics",
      "Docs"
    ]
  },
  {
    "objectID": "measurements.html",
    "href": "measurements.html",
    "title": "Descriptions des contaminants",
    "section": "",
    "text": "Otenir une liste exhaustive des contaminants mesurés chez quatre espèces impliquées dans le PASL.\n\nRegrouper ces contaminants en famille\n\nDéterminer les tailles d’échantillons pour les combinaisons: Site, espèce, années, contaminant\n\nÉtablir le nombre de d’échantillons pour chaque combinaison\nÉtablir le nombre de données censurées pour chaque combinaison"
  },
  {
    "objectID": "measurements.html#objectifs",
    "href": "measurements.html#objectifs",
    "title": "Descriptions des contaminants",
    "section": "",
    "text": "Otenir une liste exhaustive des contaminants mesurés chez quatre espèces impliquées dans le PASL.\n\nRegrouper ces contaminants en famille\n\nDéterminer les tailles d’échantillons pour les combinaisons: Site, espèce, années, contaminant\n\nÉtablir le nombre de d’échantillons pour chaque combinaison\nÉtablir le nombre de données censurées pour chaque combinaison"
  },
  {
    "objectID": "measurements.html#objectif-1.-otenir-une-liste-exhaustive-des-contaminants",
    "href": "measurements.html#objectif-1.-otenir-une-liste-exhaustive-des-contaminants",
    "title": "Descriptions des contaminants",
    "section": "Objectif 1. Otenir une liste exhaustive des contaminants",
    "text": "Objectif 1. Otenir une liste exhaustive des contaminants\nOn cherche à obtenir une liste exhaustive des contaminants mesurés chez quatre espèces impliquées dans le PASL.\n\nIsolation des plages de données pour les contaminants\nRecencement des fichiers et des feuillets (1 feuillet = 1 famille) Pour chacun des fichiers et feuillets, j’identifie la plage de colonne dans laquelle se retrouve les valeurs des contaminants (voir la liste intitulée “sheets” pour chacun des fichiers).\n\ncontaminants_mapping &lt;- list(\n    herons = list(\n        path = \"Z:/01-Projets et suivis/PASL/GrandHeron/Base de donnees GBHE oeufs.xlsx\",\n        sheets = list(\n            PFC = c(\"PFBA\", \"PFDS\"),\n            OC = c(\"1.2.4.5-Tetrachlorobenzene\", \"TCPM\"),\n            PCB = c(\"PCB18/17\", \"Aroclor1260\"),\n            BFR = c(\"BDE-7\", \"anti-DP\"),\n            `non-ortho PCBs` = c(\"PCB-81\", \"PCB-169\"),\n            `PCDDs & PCDFs` = c(\"2378-TCDD\", \"OCDF\"),\n            Toxaphene = c(\"Total toxaphene\", \"B9-1025\"),\n            FAME = c(\"Caproic Acid\", \"Docosahexaenoic Acid (DHA)\"),\n            THg = c(\"THg-dw\", \"THg-ww\"),\n            SI = c(\"d13C\", \"d34S\")\n        )\n    ),\n    eiders = list(\n        path = \"Z:/01-Projets et suivis/PASL/EiderDuvet/Base de donnees COEI.xlsx\",\n        sheets = list(\n            PFC = c(\"PFBA\", \"PFDS\"),\n            OC = c(\"1,2,4,5-Tetrachlorobenzene\", \"Mirex\"),\n            PCB = c(\"PCB17/18\", \"PCB209\"),\n            BFR = c(\"b-TBECH/BDE15\", \"BB101\"),\n            THg = c(\"THg_dw\", \"THg_ww\")\n        )\n    ),\n    gulls = list(\n        path = \"Z:/01-Projets et suivis/PASL/GoelandArgenté/Base de donnees HERG.xlsx\",\n        sheets = list(\n            PFC = c(\"PFBA\", \"PFDS\"),\n            OC = c(\"1,2,4,5-Tetrachlorobenzene\", \"Mirex\"),\n            PCB = c(\"PCB17/18\", \"PCB209\"),\n            BFR = c(\"b-TBECH/BDE15\", \"BB101\"),\n            THg = c(\"THg\", \"THg\"),\n            SI = c(\"d13C\", \"d34S\")\n        )\n    ),\n    gannets = list(\n        path = \"Z:/01-Projets et suivis/PASL/FouBassan/Stats_NOGA_Temporal2022/Integration_ST LAWRENCE_Gannets Trends 1969-2019_OC-PCB-FR Metals D-F FAME CNS.xlsx\",\n        sheets = list(\n            OC = c(\"1245TCB\", \"Mirex\"),\n            PCB = c(\"PCB18/17\", \"Aroclor1260\"),\n            BFR = c(\"BDE-15_B-TBECH\", \"anti-DP\"),\n            `Non-ortho PCBs` = c(\"PCB 81\", \"PCB 169\"),\n            `PCDDs & PCDFs` = c(\"2378-TCDD\", \"OCDF\"),\n            Metal = c(\"THg\", \"Al\"),\n            FAME = c(\"caproic acid\", \"docosahexaenoic acid (DHA)\"),\n            SI = c(\"d15N\", \"CN\")\n        )\n    )\n)\n\n\n\nFusion des mesures de contaminants\nOn effectue une double map (comme une double loop). Cette opération va extraire les valeurs de contaminants en traversant les classeurs (1 par espèce), et les feuillets (1 par famille de contaminant).\n\ncontaminants &lt;- purrr::map(\n    # Loop over species dataset\n    contaminants_mapping, \\(f){\n        # Copy the excel file locally in the temp folder\n        tmp_file &lt;- tempfile()\n        invisible(file.copy(f$path, tmp_file, overwrite = TRUE))\n        # Loop over sheets\n        purrr::map2(f$sheets, names(f$sheets), \\(s, n){\n            readxl::read_excel(tmp_file, sheet = n) |&gt;\n                dplyr::select(\"Year\", \"Location\", \"SampleID\", \"Species\", s[1]:s[2]) |&gt;\n                dplyr::mutate(source = f$path, conpound_family = n) |&gt;\n                dplyr::mutate(across(everything(), as.character)) |&gt;\n                tidyr::pivot_longer(cols = s[1]:s[2], names_to = \"variable\") |&gt;\n                dplyr::filter(!is.na(value))\n        }) |&gt; dplyr::bind_rows()\n}) |&gt; dplyr::bind_rows()\n\ncontaminants |&gt; dplyr::group_by(Location) |&gt; dplyr::summarize(\n    nSpecies = dplyr::n_distinct(Species)) |&gt; dplyr::arrange(desc(nSpecies))\n\n# A tibble: 66 × 2\n   Location                                    nSpecies\n   &lt;chr&gt;                                          &lt;int&gt;\n 1 Ile Laval                                          3\n 2 Ile aux Oeufs                                      2\n 3 Kamouraska                                         2\n 4 Missipinuk (Grosse Romaine)                        2\n 5 Archipel de Mingan (approximative location)        1\n 6 Battures aux Loups Marins                          1\n 7 Beauharnois                                        1\n 8 Betchouanes                                        1\n 9 Bonaventure                                        1\n10 Bonaventure Island                                 1\n# ℹ 56 more rows\n\n\n\n\nQA sur les noms de contaminants\nCertains noms de composées divergent entre les différents classeurs de données (espèces)\n\ndups_contaminants &lt;- contaminants |&gt; \n    dplyr::group_by(conpound_family, variable) |&gt;\n    dplyr::arrange(desc(variable)) |&gt;\n    dplyr::count()\n\ndups_contaminants\n\n# A tibble: 398 × 3\n# Groups:   conpound_family, variable [398]\n   conpound_family variable             n\n   &lt;chr&gt;           &lt;chr&gt;            &lt;int&gt;\n 1 BFR             BB-101             133\n 2 BFR             BB101               40\n 3 BFR             BDE-100            140\n 4 BFR             BDE-116              3\n 5 BFR             BDE-119              7\n 6 BFR             BDE-126              3\n 7 BFR             BDE-138            140\n 8 BFR             BDE-140              7\n 9 BFR             BDE-15               4\n10 BFR             BDE-15 / β-TBECH    85\n# ℹ 388 more rows\n\n\nAtelier 1: Jouer a pareil, pas pareil, pour consolider la nomenclature des contaminants\n\n\nQA sur les noms des sites\n\ndups_sites &lt;- contaminants |&gt; \n    dplyr::group_by(Location) |&gt;\n    dplyr::count()\n\ndups_sites\n\n# A tibble: 66 × 2\n# Groups:   Location [66]\n   Location                                        n\n   &lt;chr&gt;                                       &lt;int&gt;\n 1 Archipel de Mingan (approximative location)   192\n 2 Battures aux Loups Marins                      51\n 3 Beauharnois                                   196\n 4 Betchouanes                                    85\n 5 Bonaventure                                    50\n 6 Bonaventure Island                           6097\n 7 Deslauriers                                    80\n 8 Escuminac                                      62\n 9 Grande Ile                                   3187\n10 Gros Pot                                       65\n# ℹ 56 more rows\n\n\nAtelier 2: Jouer a pareil, pas pareil, pour consolider la nomenclature des sites\n\n\nQA Data censurées\nOn applique la transformation avec la fonction toxbox::uncensored().\n\ncontaminants_uncensored &lt;- contaminants |&gt; \n    toxbox::uncensored(cols = \"value\", keep_cens = TRUE)\n\nWarning: There was 1 warning in `dplyr::mutate()`.\nℹ In argument: `dplyr::across(tidyselect::all_of(cols), remove_cens)`.\nCaused by warning:\n! NAs introduced by coercion\n\n\nIsolation des valeurs NA’s pour comprendre quelles sont les mesures qui ne peuvent pas être transformé en valeur numérique.\n\nQ1. Combien de données se retrouvent dans ce cas de figure?\n\ntable(is.na(contaminants_uncensored$value))\n\n\nFALSE  TRUE \n31592   780 \n\n\n\n\nQ2. Dans quelle classeur et quel onglet on retrouve ces valeurs?\n\ncontaminants_uncensored |&gt; \n    dplyr::filter(is.na(value)) |&gt;\n    dplyr::group_by(source, conpound_family) |&gt;\n    dplyr::count() |&gt;\n    dplyr::arrange(source)\n\n# A tibble: 7 × 3\n# Groups:   source, conpound_family [7]\n  source                                                   conpound_family     n\n  &lt;chr&gt;                                                    &lt;chr&gt;           &lt;int&gt;\n1 Z:/01-Projets et suivis/PASL/FouBassan/Stats_NOGA_Tempo… FAME              597\n2 Z:/01-Projets et suivis/PASL/FouBassan/Stats_NOGA_Tempo… PCDDs & PCDFs       6\n3 Z:/01-Projets et suivis/PASL/GrandHeron/Base de donnees… OC                 21\n4 Z:/01-Projets et suivis/PASL/GrandHeron/Base de donnees… PCB                10\n5 Z:/01-Projets et suivis/PASL/GrandHeron/Base de donnees… PCDDs & PCDFs      96\n6 Z:/01-Projets et suivis/PASL/GrandHeron/Base de donnees… PFC                40\n7 Z:/01-Projets et suivis/PASL/GrandHeron/Base de donnees… non-ortho PCBs     10\n\n\n\n\nQ3. C’est quoi les valeurs qui ne peuvent pas être transférer en valeur numérique (après retrait du symbole &lt;)?\nTODO: A compléter ici, marche pas\n\ncontaminants |&gt; \n    dplyr::filter(stringr::str_detect(stringr::str_trim(value), \"[:alpha:]\")) |&gt;\n    as.data.frame()"
  },
  {
    "objectID": "measurements.html#objectif-2-déterminer-la-taille-déchantillons",
    "href": "measurements.html#objectif-2-déterminer-la-taille-déchantillons",
    "title": "Descriptions des contaminants",
    "section": "Objectif 2: Déterminer la taille d’échantillons",
    "text": "Objectif 2: Déterminer la taille d’échantillons\nOn compte le nombre de mesures pour chaque combinaison.\ndata_count &lt;- contaminants |&gt; \n    dplyr::mutate(Year = as.integer(Year)) |&gt;\n    toxbox::uncensored(cols = \"value\", keep_cens = TRUE) |&gt;\n    dplyr::group_by(Location, Year, Species, conpound_family, variable) |&gt;\n    dplyr::summarise(n = dplyr::n(), n_censored = sum(value_censored))\nWarning: There was 1 warning in `dplyr::mutate()`.\nℹ In argument: `dplyr::across(tidyselect::all_of(cols), remove_cens)`.\nCaused by warning:\n! NAs introduced by coercion\n`summarise()` has grouped output by 'Location', 'Year', 'Species',\n'conpound_family'. You can override using the `.groups` argument.\n\ndata_count |&gt;\n    DT::datatable()\n\n\n\n\n\n\nCriteria 1. On retire les sites pour lesquelles, il y a une seule année de collecte (impossibilité de calibrer un modèle de tendance temporelle).\nVoici la liste des sites pour lesquelles, on a une seule année de mesure\ncrit1 &lt;- contaminants |&gt; \n    dplyr::select(Location, Year) |&gt;\n    dplyr::distinct() |&gt;\n    dplyr::group_by(Location) |&gt;\n    dplyr::count() |&gt;\n    dplyr::filter(n == 1) |&gt;\n    dplyr::pull(Location)\n\ncat(paste(\"*\", crit1), sep=\"\\n\")\n\nArchipel de Mingan (approximative location)\nBeauharnois\nBetchouanes\nBonaventure\nDeslauriers\nEscuminac\nGros Pot\nIle Beauséjour\nIle Bellechasse\nIle Bienville\nIle Blanche\nIle Dodens\nIle Dowker\nIle Nue\nIle Saint-Barnabé\nIle a Bouleau de Terre\nIle aux Pommes\nIle de la Madeleine\nIle de la Mine\nIle du Petit Caoui\nIle du Petit Caouis\nIle à Calculot des Betchouanes\nIles aux Loups Marins\nIles de la Madeleine\nIlets Boisés\nIlets De Quen\nKamouraska\nKukuministuk (Caye à Cochons)\nLac Bleu\nLac Evans\nLac Saint-Bernard\nLac St-Pierre\nLac à la Carpe\nLong Island\nMiller island\nMissipinuk (Grosse Romaine)\nPetit Lac Jacques Cartier\nPetite Ile Ste-Geneviève\nPointe Saint-Pancrace\nPrairie du Castor\nRiviere George\n\nOn retire ces sites pour l’étude de la taille de l’échantillon\n\ndata_count &lt;- data_count |&gt;\n    dplyr::filter(!(Location %in% crit1)) |&gt;\n    dplyr::ungroup()\n\n\n\nSite Battures aux Loups Marins\n\n\n\nSite Bonaventure Island\n\n\n\nSite Grande Ile\n\n\n\nSite Ile Carillon\n\n\n\nSite Ile Dickerson\n\n\n\nSite Ile Eaton\n\n\n\nSite Ile Laval\n\n\n\nSite Ile Manowin\n\n\n\nSite Ile Matane\n\n\n\nSite Ile Saint-Bernard\n\n\n\nSite Ile Steamboat\n\n\n\nSite Ile Villemomble\n\n\n\nSite Ile aux Basques\n\n\n\nSite Ile aux Herons\n\n\n\nSite Ile aux Hérons\n\n\n\nSite Ile aux Oeufs\n\n\n\nSite Ile de Carillon\n\n\n\nSite Ile de la Corneille\n\n\n\nSite Ile du Bic\n\n\n\nSite Ile du Corossol\n\n\n\nSite Iles Sainte-Marie\n\n\n\nSite Maria\n\n\n\nSite Petit lac Jacques-Cartier\n\n\n\nSite Refuge Watshishou\n\n\n\nSite Yamachiche"
  },
  {
    "objectID": "measurements.html#objectif-3.-distribution",
    "href": "measurements.html#objectif-3.-distribution",
    "title": "Descriptions des contaminants",
    "section": "Objectif 3. Distribution",
    "text": "Objectif 3. Distribution\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\nggplot(dplyr::filter(contaminants_uncensored, variable == \"Dieldrin\"), aes(value)) +\n  geom_histogram() + facet_wrap(~Location)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_bin()`)."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Recensement des projets et rapports d’analyse",
    "section": "",
    "text": "Pourquoi? Chaque rapport contient sur sa page de garde l’ensemble des métadonnées en lien avec le projet de recherche pour lequel l’analyse a été demandé.\nUn rapport de laboratoire peut être detectable dans une liste de fichier par la structure de son identifiant unique. Voici un exemple d’identifiant unique: CHEM-PCDD-00-07 ou encore MB-05-10. Ces identifiants ont une structure unique que l’on peut detecter grace à l’expression régulière suivante:\n\nregex_report_id &lt;- \"([A-Za-z]{2,5}-)?[A-Za-z]{2,5}-\\\\d{2}-\\\\d{2}\"\n\nCette expression régulière sera utilisée plusieurs fois dans ce document.\nOn liste les rapports de laboratoire présents dans le dossier 03-Labo/Results Reports.\n\nreports_path &lt;- list.files(\n    \"C:/Users/VissaultS/Documents/03-Labo/Results Reports\", \n    pattern = \"*.pdf|*.docx|*.doc\", recursive = TRUE, full.names = TRUE\n)\n\n# On extrait les identifiants des rapports du nom du fichier\nreport_id &lt;- stringr::str_extract(reports_path, regex_report_id)\n\n# On obtient la signature du fichier, ca va être pratique pour detecter les fichiers dupliqués même si le nom du fichier est différent.\nfile_hash &lt;- tools::md5sum(reports_path)\n\n# On extrait l'extension du fichier\nfile_ext &lt;- reports_path |&gt; \n    strsplit(\"[.]\") |&gt; \n    purrr::map_chr(\\(e) return(e[2]))\n\n# On compose un tableau avec l'ensemble de ces informations\nreports &lt;- data.frame(\n        path = reports_path, \n        id = report_id, \n        hash = file_hash, \n        ext = file_ext\n    ) |&gt; tibble::as_tibble()\n\nNote: tools::md5sum permet de générer une signature unique propre au fichier. Ainsi deux fichiers identiques dans le contenu mais avec des noms différents pourront être identifié comme des duplicats.\nVoici la liste des fichiers identiques dans le dossier 03-Labo/Results Reports.\nreports_dup &lt;- reports |&gt; \n    tibble::as_tibble() |&gt;\n    janitor::get_dupes(-c(path)) |&gt;\n    dplyr::select(-hash)\n\nreports_dup |&gt; knitr::kable()\n\n\n\n\n\n\n\n\n\nid\next\ndupe_count\npath\n\n\n\n\nBMK-PFC-23-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/BMK-PFC-23-10_HERG-COEI_eggs2023.pdf\n\n\nBMK-PFC-23-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/EideràDuvet Rapports 1972-2023/BMK-PFC-23-10_HERG-COEI_eggs2023.pdf\n\n\nBMK-PFC-23-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/BMK-PFC-23-10_HERG-COEI_eggs2023.pdf\n\n\nCHEM-OC-22-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/CHEM-OC-22-10_GBHE-HERG2022.pdf\n\n\nCHEM-OC-22-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/CHEM-OC-22-10_GBHE-HERG2022.pdf\n\n\nCHEM-OC-22-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GrandHeron Rapports xxxx-2022/Rapports/CHEM-OC-22-10_GBHE-HERG2022.pdf\n\n\nMET-THg-22-05\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/MET-THg-22-05 - RALA01-2022_HERG-GBHEegg2022.pdf\n\n\nMET-THg-22-05\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GrandHeron Rapports xxxx-2022/Rapports/MET-THg-22-05 - RALA01-2022_HERG-GBHEegg2022.pdf\n\n\nMET-THg-22-05\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/MET-THg-22-05 - RALA01-2022_HERG-GBHEegg2022.pdf\n\n\nMET-THg-23-13\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/EideràDuvet Rapports 1972-2023/MET-THg-23-13 - RALA01-2023.pdf\n\n\nMET-THg-23-13\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/MET-THg-23-13 - RALA01-2023.pdf\n\n\nMET-THg-23-13\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/MET-THg-23-13 - RALA01-2023_OeufsCOEI-HERG2023.pdf\n\n\nTP-SI-22-09\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/TP-SI-22-09C_RALA01-2022_HERG-GBHEeggs2022.pdf\n\n\nTP-SI-22-09\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GrandHeron Rapports xxxx-2022/Rapports/TP-SI-22-09C_RALA01-2022_HERG-GBHEeggs2022.pdf\n\n\nTP-SI-22-09\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/TP-SI-22-09C_RALA01-2022_HERG-GBHEeggs2022.pdf\n\n\nCHEM-OC-21-08\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/CHEM-OC-21-08R.pdf\n\n\nCHEM-OC-21-08\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/FouBassan Rapports 1984-2019/CHEM-OC-21-08R.pdf\n\n\nCHEM-OC-22-05\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/CHEM-OC-22-05_HERGDeslauriers.pdf\n\n\nCHEM-OC-22-05\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/CHEM-OC-22-05_HERGDeslauriers.pdf\n\n\nCHEM-OC-23-08\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/CHEM-OC-23-08_EggHERG_COEI_2023.pdf\n\n\nCHEM-OC-23-08\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/EideràDuvet Rapports 1972-2023/CHEM-OC-23-08_EggHERG_COEI_2023.pdf\n\n\nMET-THg-21-03\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/FouBassan Rapports 1984-2019/MET-THg-21-03.pdf\n\n\nMET-THg-21-03\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/MET-THg-21-03 - RALA01-2021_eggs.pdf\n\n\nTP-SI-21-05\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/FouBassan Rapports 1984-2019/TP-SI-21-05C.pdf\n\n\nTP-SI-21-05\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/TP-SI-21-05C_RALA01-2021.pdf\n\n\n\nOn selectionne le premier rapport en se basant sur le id (ex. BMK-PFC-23-01) pour éliminer les rapports dupliqués pour la suite de l’analyse. On s’assure de selectionner préférablement les pdfs si on dispose d’un docx et d’un document pdf pour le même identifiant de rapport de laboratoire.\n\nreports &lt;- reports |&gt; \n    # On retire les rapports qui sont dupliqués\n    dplyr::group_by(hash) |&gt;\n    dplyr::slice(1) |&gt;\n    dplyr::ungroup() |&gt;\n    # Si plusieurs extension de fichiers, on selectionne ceux en PDF préférablement, sinon .docx, sinon .doc en dernier recours.\n    dplyr::group_split(id) |&gt;\n    purrr::map(\\(g){\n        g |&gt; dplyr::arrange(factor(ext, levels = c('pdf', 'docx', 'doc'))) |&gt;\n        dplyr::slice(1)\n    }) |&gt;\n    dplyr::bind_rows()\n\nQuelques rapports de laboratoire demeurent au format doc et docx.\ndocs &lt;- reports |&gt; dplyr::filter(ext %in% c('doc', 'docx')) \ndocs |&gt; knitr::kable()\n\n\n\npath\nid\nhash\next\n\n\n\n\n\nAfin de faciliter l’extraction des métadonnées, on convertit les fichiers .doc et .docx en pdf"
  },
  {
    "objectID": "projects.html#établir-une-liste-exhaustive-des-rapports-de-laboratoire",
    "href": "projects.html#établir-une-liste-exhaustive-des-rapports-de-laboratoire",
    "title": "Recensement des projets et rapports d’analyse",
    "section": "",
    "text": "Pourquoi? Chaque rapport contient sur sa page de garde l’ensemble des métadonnées en lien avec le projet de recherche pour lequel l’analyse a été demandé.\nUn rapport de laboratoire peut être detectable dans une liste de fichier par la structure de son identifiant unique. Voici un exemple d’identifiant unique: CHEM-PCDD-00-07 ou encore MB-05-10. Ces identifiants ont une structure unique que l’on peut detecter grace à l’expression régulière suivante:\n\nregex_report_id &lt;- \"([A-Za-z]{2,5}-)?[A-Za-z]{2,5}-\\\\d{2}-\\\\d{2}\"\n\nCette expression régulière sera utilisée plusieurs fois dans ce document.\nOn liste les rapports de laboratoire présents dans le dossier 03-Labo/Results Reports.\n\nreports_path &lt;- list.files(\n    \"C:/Users/VissaultS/Documents/03-Labo/Results Reports\", \n    pattern = \"*.pdf|*.docx|*.doc\", recursive = TRUE, full.names = TRUE\n)\n\n# On extrait les identifiants des rapports du nom du fichier\nreport_id &lt;- stringr::str_extract(reports_path, regex_report_id)\n\n# On obtient la signature du fichier, ca va être pratique pour detecter les fichiers dupliqués même si le nom du fichier est différent.\nfile_hash &lt;- tools::md5sum(reports_path)\n\n# On extrait l'extension du fichier\nfile_ext &lt;- reports_path |&gt; \n    strsplit(\"[.]\") |&gt; \n    purrr::map_chr(\\(e) return(e[2]))\n\n# On compose un tableau avec l'ensemble de ces informations\nreports &lt;- data.frame(\n        path = reports_path, \n        id = report_id, \n        hash = file_hash, \n        ext = file_ext\n    ) |&gt; tibble::as_tibble()\n\nNote: tools::md5sum permet de générer une signature unique propre au fichier. Ainsi deux fichiers identiques dans le contenu mais avec des noms différents pourront être identifié comme des duplicats.\nVoici la liste des fichiers identiques dans le dossier 03-Labo/Results Reports.\nreports_dup &lt;- reports |&gt; \n    tibble::as_tibble() |&gt;\n    janitor::get_dupes(-c(path)) |&gt;\n    dplyr::select(-hash)\n\nreports_dup |&gt; knitr::kable()\n\n\n\n\n\n\n\n\n\nid\next\ndupe_count\npath\n\n\n\n\nBMK-PFC-23-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/BMK-PFC-23-10_HERG-COEI_eggs2023.pdf\n\n\nBMK-PFC-23-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/EideràDuvet Rapports 1972-2023/BMK-PFC-23-10_HERG-COEI_eggs2023.pdf\n\n\nBMK-PFC-23-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/BMK-PFC-23-10_HERG-COEI_eggs2023.pdf\n\n\nCHEM-OC-22-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/CHEM-OC-22-10_GBHE-HERG2022.pdf\n\n\nCHEM-OC-22-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/CHEM-OC-22-10_GBHE-HERG2022.pdf\n\n\nCHEM-OC-22-10\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GrandHeron Rapports xxxx-2022/Rapports/CHEM-OC-22-10_GBHE-HERG2022.pdf\n\n\nMET-THg-22-05\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/MET-THg-22-05 - RALA01-2022_HERG-GBHEegg2022.pdf\n\n\nMET-THg-22-05\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GrandHeron Rapports xxxx-2022/Rapports/MET-THg-22-05 - RALA01-2022_HERG-GBHEegg2022.pdf\n\n\nMET-THg-22-05\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/MET-THg-22-05 - RALA01-2022_HERG-GBHEegg2022.pdf\n\n\nMET-THg-23-13\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/EideràDuvet Rapports 1972-2023/MET-THg-23-13 - RALA01-2023.pdf\n\n\nMET-THg-23-13\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/MET-THg-23-13 - RALA01-2023.pdf\n\n\nMET-THg-23-13\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/MET-THg-23-13 - RALA01-2023_OeufsCOEI-HERG2023.pdf\n\n\nTP-SI-22-09\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/TP-SI-22-09C_RALA01-2022_HERG-GBHEeggs2022.pdf\n\n\nTP-SI-22-09\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GrandHeron Rapports xxxx-2022/Rapports/TP-SI-22-09C_RALA01-2022_HERG-GBHEeggs2022.pdf\n\n\nTP-SI-22-09\npdf\n3\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/TP-SI-22-09C_RALA01-2022_HERG-GBHEeggs2022.pdf\n\n\nCHEM-OC-21-08\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/CHEM-OC-21-08R.pdf\n\n\nCHEM-OC-21-08\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/FouBassan Rapports 1984-2019/CHEM-OC-21-08R.pdf\n\n\nCHEM-OC-22-05\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/CHEM-OC-22-05_HERGDeslauriers.pdf\n\n\nCHEM-OC-22-05\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/GoelandArgente 2017, 2022-23/CHEM-OC-22-05_HERGDeslauriers.pdf\n\n\nCHEM-OC-23-08\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/CHEM-OC-23-08_EggHERG_COEI_2023.pdf\n\n\nCHEM-OC-23-08\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/EideràDuvet Rapports 1972-2023/CHEM-OC-23-08_EggHERG_COEI_2023.pdf\n\n\nMET-THg-21-03\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/FouBassan Rapports 1984-2019/MET-THg-21-03.pdf\n\n\nMET-THg-21-03\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/MET-THg-21-03 - RALA01-2021_eggs.pdf\n\n\nTP-SI-21-05\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/FouBassan Rapports 1984-2019/TP-SI-21-05C.pdf\n\n\nTP-SI-21-05\npdf\n2\nC:/Users/VissaultS/Documents/03-Labo/Results Reports/TP-SI-21-05C_RALA01-2021.pdf\n\n\n\nOn selectionne le premier rapport en se basant sur le id (ex. BMK-PFC-23-01) pour éliminer les rapports dupliqués pour la suite de l’analyse. On s’assure de selectionner préférablement les pdfs si on dispose d’un docx et d’un document pdf pour le même identifiant de rapport de laboratoire.\n\nreports &lt;- reports |&gt; \n    # On retire les rapports qui sont dupliqués\n    dplyr::group_by(hash) |&gt;\n    dplyr::slice(1) |&gt;\n    dplyr::ungroup() |&gt;\n    # Si plusieurs extension de fichiers, on selectionne ceux en PDF préférablement, sinon .docx, sinon .doc en dernier recours.\n    dplyr::group_split(id) |&gt;\n    purrr::map(\\(g){\n        g |&gt; dplyr::arrange(factor(ext, levels = c('pdf', 'docx', 'doc'))) |&gt;\n        dplyr::slice(1)\n    }) |&gt;\n    dplyr::bind_rows()\n\nQuelques rapports de laboratoire demeurent au format doc et docx.\ndocs &lt;- reports |&gt; dplyr::filter(ext %in% c('doc', 'docx')) \ndocs |&gt; knitr::kable()\n\n\n\npath\nid\nhash\next\n\n\n\n\n\nAfin de faciliter l’extraction des métadonnées, on convertit les fichiers .doc et .docx en pdf"
  },
  {
    "objectID": "projects.html#convertion-des-documents-word-en-pdf",
    "href": "projects.html#convertion-des-documents-word-en-pdf",
    "title": "Recensement des projets et rapports d’analyse",
    "section": "Convertion des documents Word en pdf",
    "text": "Convertion des documents Word en pdf\nCette étape a été compété manuellement."
  },
  {
    "objectID": "projects.html#extraire-les-métadonnées-du-rapport",
    "href": "projects.html#extraire-les-métadonnées-du-rapport",
    "title": "Recensement des projets et rapports d’analyse",
    "section": "Extraire les métadonnées du rapport",
    "text": "Extraire les métadonnées du rapport\nNous souhaitons générer une liste de tous les projets basée sur les 4 rapports de laboratoire stockés dans le dossier 03-Labo/Comptes rendus de résultats. La première page de chaque rapport de laboratoire contient toutes les informations pertinentes pour produire cette liste.\nPour chaque rapport, nous vérifions s’il s’agit d’une image ou non. Si le rapport est une image, nous devons utiliser une reconnaissance optique de caractères (OCR) afin d’extraire le texte de la première page et d’obtenir toutes les métadonnées pertinentes. Si c’est un pdf ou un fichier word, nous importons la première page du document.\n\nreports &lt;- reports |&gt; dplyr::mutate(\n    filename = basename(path),\n    is_image = purrr::map2_lgl(path, ext, \\(p, e) {\n        if(e == \"pdf\"){\n            out &lt;- pdftools::pdf_text(p)\n            !all(nchar(out) &gt; 15)\n        } else {\n            FALSE\n        }\n    })\n)\n\nfrontpages &lt;- purrr::map2_vec(reports$path, reports$is_image, \\(p, i) {\n        ifelse(isTRUE(i), \n            pdftools::pdf_ocr_text(pdf = p, pages = 1),\n            pdftools::pdf_text(pdf = p)[[1]]\n        )\n    }) |&gt; tolower()\n\n\nproject_id &lt;- purrr::map_vec(frontpages, \\(f){\n    stringr::str_extract(f, \"(?&lt;=(project: |project |projects|projet :)).*(?=\\n)\")\n}) |&gt; \n    toupper() |&gt; \n    stringr::word(1) |&gt; \n    stringr::str_replace_all(\"[.,]\", \"\") |&gt;\n    stringr::str_trim() |&gt;\n    dplyr::na_if(\"\")\n\nproject_leader &lt;- purrr::map_vec(frontpages, \\(f){\n        stringr::str_extract(f, \"(?&lt;=(project leader: |project leader |project manager: |manager: |study leader: |nom du requérant :)).*(?=\\n)\")\n    }) |&gt; \n    stringr::str_replace_all(c(\"[_|:]\" = \"\", \"[:digit:]\" = \"\", \"[.]$\" = \"\")) |&gt; \n    stringr::str_to_title() |&gt;\n    stringr::str_trim()\n\nproject_dates &lt;- frontpages |&gt;\n    purrr::map_vec(\\(f){\n        dates &lt;- stringr::str_extract(f, \"\\\\d{4}-\\\\d{2}-\\\\d{2}\")\n        if(is.na(dates)) {\n            dates &lt;- stringr::str_extract(f, \"(?&lt;=(date: )).*(?=\\n)\")\n        }\n        return(dates)\n    }) \n        \nreportsProject &lt;- data.frame(\n    report_id = reports$id, \n    report_access_path = stringr::str_replace_all(reports$path, \"C:/Users/VissaultS/Documents\", \"Z:\"), \n    project_id, project_leader, project_dates, project_title = NA\n)\n\nLe data.frame reportsProject est à la base du fichier “Z:\\07-Données BD_projects_list_extract_25032024.xlsx”."
  },
  {
    "objectID": "projects.html#valider-lexistence-de-rapports-de-laboratoire-dans-le-dossier-01-projet-et-suivis",
    "href": "projects.html#valider-lexistence-de-rapports-de-laboratoire-dans-le-dossier-01-projet-et-suivis",
    "title": "Recensement des projets et rapports d’analyse",
    "section": "Valider l’existence de rapports de laboratoire dans le dossier 01-Projet et suivis",
    "text": "Valider l’existence de rapports de laboratoire dans le dossier 01-Projet et suivis\nOn valide si certains de ces rapports ne se retrouvent pas dans le dossier 03-Labo/Comptes rendus. Ces rapports pourraient potentiellement nous interressés.\n\nfiles &lt;- list.files(\n    \"C:/Users/VissaultS/Documents/01-Projets et suivis\", \n    pattern = \"*.pdf|*.docx|*.doc\", recursive = TRUE, full.names = TRUE\n)\n\npotential_reports &lt;- data.frame(file = files[which(stringr::str_detect(files, regex_report_id))])\n\npotential_reports &lt;- potential_reports |&gt; dplyr::mutate(\n    id = stringr::str_extract(file, regex_report_id) |&gt; toupper(),\n    in_lab_report_folder = !(id %in% reports$id)\n) |&gt; dplyr::arrange(in_lab_report_folder) |&gt;\n    dplyr::mutate(file = stringr::str_replace(file, \"C:/Users/VissaultS/Documents/\", \"Z:\"))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]