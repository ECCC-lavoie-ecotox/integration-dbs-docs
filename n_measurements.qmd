---
title: "Déterminer la taille des échantillons par site"
author: "Steve Vissault"
date: "2024-01-05"
---

On compte le nombre de mesures pour chaque combinaison.

```{R, results = "asis"}
contaminants <- toxbox::itgr_measurements()

data_count <- contaminants |> 
    dplyr::mutate(Year = as.integer(Year)) |>
    toxbox::uncensored(cols = "value", keep_cens = TRUE) |>
    dplyr::group_by(Location, Year, Species, conpound_family, variable) |>
    dplyr::summarise(n = dplyr::n(), n_censored = sum(value_censored))
```

```{R}
data_count |>
    reactable::reactable()
```

### Criteria 1. On retire les sites pour lesquelles, il y a une seule année de collecte (impossibilité de calibrer un modèle de tendance temporelle).

Voici la liste des sites pour lesquelles, on a une seule année de mesure

```{R, results = "asis"}
crit1 <- contaminants |> 
    dplyr::select(Location, Year) |>
    dplyr::distinct() |>
    dplyr::group_by(Location) |>
    dplyr::count() |>
    dplyr::filter(n == 1) |>
    dplyr::pull(Location)

cat(paste("*", crit1), sep="\n")
```

On retire ces sites pour l'étude de la taille de l'échantillon

```{R}
data_count <- data_count |>
    dplyr::filter(!(Location %in% crit1)) |>
    dplyr::ungroup()
```

```{r, include = FALSE, eval = FALSE}
library(ggplot2)

data_count <- data_count |> 
    dplyr::mutate(n = cut(n, 
        breaks = c(1, 2, 3, 5, 10, Inf), 
        labels = c("1", "2", "3", "5-9", ">=10"), 
        right = FALSE)) |>
    dplyr::mutate(n_censored = cut(n_censored, 
        breaks = c(1, 2, 3, 5, 10, Inf), 
        labels = c("1", "2", "3", "5-9", ">=10"), 
        right = FALSE))

sites <- data_count |> 
    dplyr::pull(Location) |> 
    unique()

for(s in sites){

    conpounds <- data_count |> 
        dplyr::filter(Location == s) |>
        dplyr::pull(conpound_family) |>
        unique()

    figs <- list()

    for (c in seq_along(conpounds)) {
        d <- data_count |> 
            dplyr::filter(conpound_family == conpounds[c] & Location == s) |>
            tidyr::complete(
                tidyr::nesting(Location, Species, conpound_family, variable), 
                Year = min(data_count$Year):max(data_count$Year), 
                fill = list(n = NA)
            )
        
        figs[[c]] <- ggplot(d, aes(x = Year, y = variable, fill = n)) + 
            geom_tile() + 
            # coord_fixed(xlim = range(data_count$Year)) + 
            ggtitle(conpounds[c]) +
            scale_x_continuous(breaks = seq(min(data_count$Year), max(data_count$Year), 1), limits = range(data_count$Year)) +
            viridis::scale_fill_viridis(discrete = TRUE, na.translate = FALSE, drop = FALSE) +
            theme_grey(base_size = 20) +
            theme(
                axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), 
                panel.grid.major = element_blank(), 
                panel.grid.minor = element_blank()
            ) + xlab("Year of measurement") + ylab("Contaminant") +
            labs(fill='Measurements (n)') + facet_wrap(~Species, ncol = 1) 
    }

    # rename figs list
    names(figs) <- conpounds

    # Calcul les tailles des figures
    tmp <- data_count |> 
        dplyr::filter(Location == s) |>
        dplyr::group_by(Location, conpound_family) |>
        dplyr::summarize(h = dplyr::n_distinct(variable)) |>
        dplyr::mutate(tot = sum(h) + 10) |>
        dplyr::mutate(h = h / sum(h)) |>
        dplyr::arrange(factor(conpound_family, levels = names(figs)))
    
    heights <- tmp |> dplyr::pull(h)
    tot <- tmp |> dplyr::pull(tot) |> unique()

    filename <- paste0(janitor::make_clean_names(s), ".png")
    p <- patchwork::wrap_plots(figs, ncol = 1, heights = heights)
    
    ggsave(
        p, 
        file = file.path("figures", filename),
        create.dir = TRUE,
        dpi = 300,
        width = 50,
        height = tot,
        units = "cm",
        limitsize = FALSE
    )
}
```

```{R, echo = FALSE, results = "asis"}
sites <- data_count |> 
    dplyr::pull(Location) |> 
    unique()

for (s in sites){
    cat("\n### Site ", s, "\n")

    cat(paste0("![](", file.path("figures", paste0(janitor::make_clean_names(s), ".png")), ")"), "\n")

    cat("\n")
}

```
